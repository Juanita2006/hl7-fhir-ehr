import os
from pymongo import MongoClient
from pymongo.errors import ConnectionFailure, OperationFailure
from bson import ObjectId
from fhir.resources.encounter import Encounter
from fhir.resources.condition import Condition
from fhir.resources.servicerequest import ServiceRequest
from fhir.resources.medicationrequest import MedicationRequest

class EncounterCRUD:
    def __init__(self):
        self.client = None
        self.db = None
        self.collections = {}
        self._connect()

    def _connect(self):
        """Establece conexi√≥n con MongoDB y configura colecciones"""
        try:
            self.client = MongoClient(
                os.getenv("MONGO_URI", "mongodb://localhost:27017/"),
                serverSelectionTimeoutMS=5000,
                socketTimeoutMS=30000,
                connectTimeoutMS=30000,
                retryWrites=True
            )
            
            # Verificar conexi√≥n
            self.client.admin.command('ping')
            self.db = self.client["JYI"]
            
            # Configurar colecciones
            self.collections = {
                "encounters": self.db["encounters"],
                "conditions": self.db["conditions"],
                "servicerequests": self.db["servicerequests"],
                "medicationrequests": self.db["medicationrequests"]
            }
            
            # Crear √≠ndices
            self._create_indexes()
            print("‚úÖ Conexi√≥n a MongoDB establecida correctamente")
            
        except ConnectionFailure as e:
            print(f"‚ùå Error cr√≠tico de conexi√≥n: {str(e)}")
            raise

    def _create_indexes(self):
        """Crea √≠ndices necesarios para optimizar consultas"""
        try:
            # √çndice para b√∫squeda por paciente en encounters
            self.collections["encounters"].create_index(
                [("subject.reference", 1)]
            )
            
            # √çndice para b√∫squeda por encounter en recursos relacionados
            for collection in ["conditions", "servicerequests", "medicationrequests"]:
                self.collections[collection].create_index(
                    [("encounter.reference", 1)]
                )
                
        except OperationFailure as e:
            print(f"‚ö†Ô∏è Error creando √≠ndices: {str(e)}")

    def WriteEncounter(self, encounter_dict: dict):
        """Guarda un recurso Encounter validado"""
        try:
            print("üì§ Validando y guardando Encounter...")
            encounter = Encounter.model_validate(encounter_dict)
            result = self.collections["encounters"].insert_one(encounter.model_dump())
            print(f"‚úÖ Encounter guardado con ID: {result.inserted_id}")
            return "success", str(result.inserted_id)
        except Exception as e:
            print(f"‚ùå Error al guardar Encounter: {str(e)}")
            return f"error: {str(e)}", None

    def WriteCondition(self, condition_dict: dict):
        """Guarda un recurso Condition validado"""
        try:
            condition = Condition.model_validate(condition_dict)
            result = self.collections["conditions"].insert_one(condition.model_dump())
            return "success", str(result.inserted_id)
        except Exception as e:
            print(f"‚ùå Error al guardar Condition: {str(e)}")
            return f"error: {str(e)}", None

    def WriteServiceRequest(self, service_request_dict: dict):
        """Guarda un recurso ServiceRequest validado"""
        try:
            service_request = ServiceRequest.model_validate(service_request_dict)
            result = self.collections["servicerequests"].insert_one(service_request.model_dump())
            return "success", str(result.inserted_id)
        except Exception as e:
            print(f"‚ùå Error al guardar ServiceRequest: {str(e)}")
            return f"error: {str(e)}", None

    def WriteMedicationRequest(self, medication_request_dict: dict):
        """Guarda un recurso MedicationRequest validado"""
        try:
            medication_request = MedicationRequest.model_validate(medication_request_dict)
            result = self.collections["medicationrequests"].insert_one(medication_request.model_dump())
            return "success", str(result.inserted_id)
        except Exception as e:
            print(f"‚ùå Error al guardar MedicationRequest: {str(e)}")
            return f"error: {str(e)}", None

    def WriteEncounterWithResources(self, encounter_data: dict):
        """
        Guarda un Encounter con sus recursos asociados de forma transaccional
        Args:
            encounter_data: {
                "encounter": dict,
                "condition": dict (opcional),
                "service_request": dict (opcional),
                "medication_request": dict (opcional)
            }
        Returns:
            tuple: (status, encounter_id)
        """
        session = None
        try:
            # Validaci√≥n inicial
            if not encounter_data.get("encounter"):
                return "error: Missing encounter data", None

            # Iniciar transacci√≥n
            session = self.client.start_session()
            session.start_transaction()
            
            print("üöÄ Iniciando transacci√≥n para guardar encounter con recursos...")
            
            # 1. Guardar Encounter
            encounter = Encounter.model_validate(encounter_data["encounter"])
            encounter_result = self.collections["encounters"].insert_one(
                encounter.model_dump(), 
                session=session
            )
            encounter_id = str(encounter_result.inserted_id)
            print(f"üìù Encounter guardado con ID: {encounter_id}")

            # 2. Procesar recursos asociados
            resources = [
                ("condition", self.WriteCondition),
                ("service_request", self.WriteServiceRequest),
                ("medication_request", self.WriteMedicationRequest)
            ]

            errors = []
            for resource_name, writer in resources:
                if resource_name in encounter_data:
                    data = encounter_data[resource_name].copy()
                    data["encounter"] = {"reference": f"Encounter/{encounter_id}"}
                    
                    # Validar y preparar recurso
                    resource = {
                        "condition": Condition,
                        "service_request": ServiceRequest,
                        "medication_request": MedicationRequest
                    }[resource_name].model_validate(data)
                    
                    # Insertar en transacci√≥n
                    collection_name = resource_name + "s"  # Pluralizar
                    self.collections[collection_name].insert_one(
                        resource.model_dump(),
                        session=session
                    )
                    print(f"‚úÖ {resource_name.capitalize()} guardado correctamente")

            # Confirmar transacci√≥n si todo fue bien
            session.commit_transaction()
            print("üéâ Transacci√≥n completada con √©xito")
            return "success", encounter_id

        except Exception as e:
            # Revertir transacci√≥n en caso de error
            if session:
                session.abort_transaction()
                print("üî¥ Transacci√≥n abortada debido a errores")
            
            print(f"‚ùå Error en WriteEncounterWithResources: {str(e)}")
            return f"error: {str(e)}", None
        
        finally:
            if session:
                session.end_session()

# Instancia global para usar en la aplicaci√≥n
encounter_crud = EncounterCRUD()
